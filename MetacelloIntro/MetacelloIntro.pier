! A Metacello Primer

Metacello is a package management system for Monticello (a versioning system used in Smalltalk).
There is a chapter about Metacello in the "*Deep into Pharo>http://deepintopharo.com/*" book, and it gives a good in-depth knowledge about this system.
However, if you want to get started without reading too much, this chapter is for you. The main goal of this chapter is to guide you through the steps required for creating a first Metacello configuration of a project. In ten minutes you will know the essential points.

!!Why Metacello is important?

When developing in Pharo, the good practices are:

-to have project distributed across the different packages;
-to use a fresh image every day to rebuild your project.

However, 

-a project usually depends on some foreign packages or projects;
-a common versioning system for Pharo is Monticello.

As a result:

-a lot of packages have to be loaded each time you start from a fresh image;
-the ones who want to use your work have to bother with all your packages and the packages that you depend on and often 
they will fail to find the right set of package versions. 

!!How does it get better with Metacello?

Metacello helps you to express all the dependencies in your project (between your packages but also with other projects).
Using it you'll be able to load all your project by just executing a short Gofer script like:

[[[
Gofer new
  url: 'http://smalltalkhub.com/mc/YuriyTymchuk/HubMap/main';
  package: 'ConfigurationOfHubMap';
  load.
#ConfigurationOfHubMap asClass loadDevelopment
]]]

in your workspace, or this:

[[[
REPO=http://www.smalltalkhub.com/mc/YuriyTymchuk/HubMap/main
./pharo $JOB_NAME.image config $REPO ConfigurationOfHubMap --install=development
]]]

in command line.

Also if someone wants to use your work he'll just have to specify a dependency on your project.

!!Creating the Configuration

!!!Case

In this chapter, examples will be referring to a "HubMap" project, with three packages: "HubMap-Model", "HubMap-Visualization" and "HubMap-Importer".
"HubMap" depends on "Roassal" project and an external package called "RecPack-Layout".

It is common to create a new configuration by copying an existing one.
However, we will follow a tough way starting from scratch and so make copy of "MetacelloConfigTemplate" class naming it "ConfigurationOfHubMap".
Usually you put it in a package with the same name. As we are using Smalltalk all this can be done just by executing:

[[[
(MetacelloConfigTemplate duplicateClassWithNewName: #ConfigurationOfHubMap)
  category: #ConfigurationOfHubMap
]]]

now how cool is that?

!!!Defining a baseline

A baseline is a place where you configure the architecture of your project i.e., what packages and dependencies are in your project.
Later you can create a version of your project based on this baseline and specify the concrete version of each package.
For more information on versions and baseline read "Managing Projects with Metacello" chapter in "*Deep into Pharo>http://deepintopharo.com*" book.

To define a baseline create this method in the configuration class:

[[[
ConfigurationOfHubMap>>baseline01: spec 
  <version: '0.1-baseline'>

  spec for: #common do: [  
    spec blessing: #baseline.
    spec repository: 'http://smalltalkhub.com/mc/YuriyTymchuk/HubMap/main'.
    ...
  ]
]]]

here "repository:" is a Monticello repository where your packages reside, and we just started with versions 0.1.

!!!Adding packages

To define packages in your configuration you should just add:

[[[
...
spec 
  package: 'HubMap-Model';
  package: 'HubMap-Visualization';
  package: 'HubMap-Importer'.
...
]]]

to your baseline method.

You get 
[[[
ConfigurationOfHubMap>>baseline01: spec 
  <version: '0.1-baseline'>

  spec for: #common do: [  
    spec blessing: #baseline.
    spec repository: 'http://smalltalkhub.com/mc/YuriyTymchuk/HubMap/main'.
    spec 
	  package: 'HubMap-Model';
	  package: 'HubMap-Visualization';
	  package: 'HubMap-Importer'.
  ]
]]]


!!!Adding package dependencies

Sometimes you need to add a package from other repository. You can define it in this way:

[[[
spec
  package: 'RecPack-Layout'
  with: [
    spec repository: 'http://smalltalkhub.com/mc/YuriyTymchuk/RecPack-Layout/main' ].
]]]

Also usually one package depends on others, for example "HubMap-Visualization" depends on "HubMap-Model". To define this you should use:

[[[
...
spec 
  package: 'HubMap-Visualization' 
  with: [ spec requires: 'HubMap-Model' ]
...
]]]

!!!Adding project dependencies

Metacello is the cornerstone of the Pharo package management system to manage projects, so there is a big chance 
that the project that you are dependant on has its own Metacello configuration. To define a project dependency, you should use:

[[[
spec project: 'Roassal' with: [
  spec
    className: 'ConfigurationOfRoassal';
    file: 'ConfigurationOfRoassal';
    version: #development;
    repository: 'http://smalltalkhub.com/mc/ObjectProfile/Roassal/main' ]
]]]

You can omit "file:" if it's the same as "className:". "version:" is a version of the project, usually you want to use #stable or #development, 
and I'll talk about this a bit later. Also note that the name "Roassal" is a logical name in the context of our configuration. It's used 
in other parts of our configuration to refer to this project.

Dependency on a project can be defined in the same way as we define dependency on a package:

[[[
...
spec 
  package: 'HubMap-Visualization' with: [ spec requires: 'Roassal' ]
]]]

Also as you can recall "HubMap-Visualization" depends on "HubMap-Model" package.
For this situation you can use an array of strings instead of a single string:

[[[
...
spec 
  package: 'HubMap-Visualization' with: [ spec requires: #('HubMap-Model' 'Roassal') ]
]]]

The full baseline configuration is the following one:

[[[
baseline01: spec
  <version: '0.1-baseline'>

  spec for: #common do: [ 
    spec blessing: #baseline.
    spec repository: 'http://smalltalkhub.com/mc/YuriyTymchuk/HubMap/main'.

    spec
      package: 'HubMap-Model';
      package: 'HubMap-Visualization' with: [
        spec requires: #('HubMap-Model' 'Roassal' 'RecPack-Layout') ];
      package: 'HubMap-Importer' with: [ spec requires: 'HubMap-Model' ].

    spec
      package: 'RecPack-Layout' with: [
        spec repository: 'http://smalltalkhub.com/mc/YuriyTymchuk/RecPack-Layout/main'.
        spec requires: 'Roassal' ].

    spec project: 'Roassal' with: [
      spec 
        className: 'ConfigurationOfRoassal';
        repository: 'http://smalltalkhub.com/mc/ObjectProfile/Roassal/main';
        version: #development ] ]
]]]

!!Symbolic versions

Usually you and especially other people do not care about the exact "number" of your version.
They just want to use a stable version, or give a try to what is new in the development.
For this you create so called "symbolic versions". At the beginning defining a "development" version should be good enough for you.
To do that, add this method to your configuration:

[[[
development: spec
  <symbolicVersion: #'development'>

  spec for: #'common' version: '0.1-baseline'
]]]

This is everything that you need to make your configuration work. 
By using a baseline as a version, you indicate that all the latest versions of the packages will be loaded. 
Now save the package with configuration to your repository and put it to use.

!!Releasing a version

Once you are ready to release next version of your project, you should take care that nothing will exigently break because of further development.
For this purpose Metacello gives you an option to define a version based on a baseline and specify exact version of packages and dependencies.
This can be done in a very simple way:

[[[
version01: spec
  <version: '0.1' imports: #('0.1-baseline')>

  spec for: #common do: [
    spec 
      package: 'HubMap-Model' with: 'HubMap-Model-YuriyTymchuk.12';
      package: 'HubMap-Visualization' with: 'HubMap-Visualization-YuriyTymchuk.1';
      package: 'HubMap-Importer' with: 'HubMap-Importer-YuriyTymchuk.4';
      package: 'RecPack-Layout' with: 'RecPack-Layout-YuriyTymchuk.16'.
    spec 
      project: 'Roassal' with: '1.6-snapshot' ]
]]]

Semantics of this method are quite simple, we go over every package and project from baseline and describe a certain version for each of them.
But sometimes when you have dozens of packages and project dependencies this can be a hard job.
In order to simplify it you can use *Snapshotcello>http://www.tudorgirba.com/blog/snappier-snapshotcello*,
a tool which generates a snapshot storing every version present at that time.
